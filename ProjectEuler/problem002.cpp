//The QUESTION being answered is the following
	//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

//This program does so correctly

#include <iostream>
using namespace std;
	
	int fibonacciEven(){									//Function with no input params and return type int: It returns the sum of the even values of the fibonacci sequence up to 4 million
		int sumOfEvenFibonacci = 0;							//Initializes a variable to store the sum 
		int currentTerm = 2;								//The current starting point in the fibonacci sequence
		int previousTerm = 1;								//The previous term in the fibonacci sequence
		int nextTerm = 0;
		while (currentTerm < 4000000){						//Evaluates untill the current term exceeds 4 million as per the requirements of the question
			if (currentTerm % 2 == 0)						//Evaluates to true if the current term is even
				sumOfEvenFibonacci += currentTerm;			//Adds the current term to the sum assuming current term is even
			nextTerm = currentTerm + previousTerm;			//Adds the current and previous term of the fib. seq. to get the next term
			previousTerm = currentTerm;						//Makes the n term the n-1 term
			currentTerm = nextTerm;							//Makes the n+1 term the n term. The shift has now occured
		}
		return sumOfEvenFibonacci;							//Returns the sum of all even fibonacci numbers between 2 and 4 million
	}

	int main()
	{
		int sum = fibonacciEven();				//Initializes the integer sum and assigns it the return value of fibonnacci even
		cout << "The sum of the even values of the fibonacci sequence to 4 million is: " << sum;   
		return 0;								//Explicitly exits the program
	}